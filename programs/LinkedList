import java.util.ListIterator;
import java.util.NoSuchElementException;

/**
 * Generic implementation of a Singly Linked List, along with its own iterator.
 *
 * @author Cameron Moberg
 * @date 04/30/2016
 */

public class LinkedList<E>
{
    private Node first;

    class Node
    {
        Node next;
        E data;
    }

    public LinkedList()
    {
        first = null;
    }

    public E getFirst()
    {
        if (first == null)
            throw new NoSuchElementException();

        return first.data;
    }

    public E removeFirst()
    {
        if (first == null)
            throw new NoSuchElementException();

        E element = first.data;
        first = first.next;
        return element;
    }

    public void addFirst(E element)
    {
        Node newNode = new Node();
        newNode.data = element;
        newNode.next = first;
        first = newNode;
    }

    public ListIterator listIterator()
    {
        return new LinkedListIterator();
    }

    class LinkedListIterator implements ListIterator
    {

        private Node position;
        private Node previous;
        private boolean isAfterNext;

        public LinkedListIterator()
        {
            position = null;
            previous = null;
            isAfterNext = false;
        }

        @Override
        public boolean hasNext()
        {
            if (position == null)
                return first != null;
            else
                return position.next != null;
        }

        @Override
        public E next()
        {
            if (!hasNext())
                throw new NoSuchElementException();

            previous = position;
            isAfterNext = true;

            if (position == null)
            {
                position = first;
            } else
            {
                position = position.next;
            }
            return position.data;
        }

        @Override
        public boolean hasPrevious()
        {
            throw new NoSuchElementException();
        }

        @Override
        public E previous()
        {
            throw new NoSuchElementException();
        }

        @Override
        public int nextIndex()
        {
            return 0;
        }

        @Override
        public int previousIndex()
        {
            return 0;
        }

        @Override
        public void remove()
        {
            if (!isAfterNext)
                throw new IllegalStateException();

            if (position == first)
            {
                removeFirst();
            } else
            {
                previous.next = position.next;
            }

            position = previous;
            isAfterNext = false;
        }

        @Override
        public void set(Object element)
        {
            if (!isAfterNext)
                throw new IllegalStateException();

            position.data = (E) element;

        }

        @Override
        public void add(Object element)
        {
            if (position == null)
            {
                addFirst((E) element);
                position = first;
            } else
            {
                Node newNode = new Node();
                newNode.data = (E) element;

                newNode.next = position;
                previous.next = newNode;
                position = newNode;
            }
            isAfterNext = false;
        }

    }
}
